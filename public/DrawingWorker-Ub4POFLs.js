self.addEventListener("message",b=>{const{command:P,payload:y}=b.data;function A(g,t,n,d){const k=d/2,e=Math.ceil(d*2)+1,w=B(e,k),D=g.data,S=new ImageData(t,n),s=S.data;for(let r=0;r<n;r++)for(let l=0;l<t;l++){let i=0,p=0,M=0,x=0,o=0;for(let c=-Math.floor(e/2);c<=Math.floor(e/2);c++){const u=l+c;if(u>=0&&u<t){const a=w[c+Math.floor(e/2)],m=(r*t+u)*4;i+=D[m]*a,p+=D[m+1]*a,M+=D[m+2]*a,x+=D[m+3]*a,o+=a}}const f=(r*t+l)*4;s[f]=i/o,s[f+1]=p/o,s[f+2]=M/o,s[f+3]=x/o}const I=new ImageData(new Uint8ClampedArray(s),t,n).data;for(let r=0;r<n;r++)for(let l=0;l<t;l++){let i=0,p=0,M=0,x=0,o=0;for(let c=-Math.floor(e/2);c<=Math.floor(e/2);c++){const u=r+c;if(u>=0&&u<n){const a=w[c+Math.floor(e/2)],m=(u*t+l)*4;i+=I[m]*a,p+=I[m+1]*a,M+=I[m+2]*a,x+=I[m+3]*a,o+=a}}const f=(r*t+l)*4;s[f]=i/o,s[f+1]=p/o,s[f+2]=M/o,s[f+3]=x/o}return S}function B(g,t){const n=[],d=g/2;let k=0;for(let e=0;e<g;e++)n[e]=Math.exp(-.5*((e-d)/t)**2),k+=n[e];for(let e=0;e<g;e++)n[e]/=k;return n}switch(P){case"blur":{const g=A(y.image,y.width,y.height,y.radius);postMessage({command:"blur",payload:{image:g}},[g.data.buffer]);break}}});self.onerror=function(b){console.error("Worker error:",b),postMessage({error:b.message})};
//# sourceMappingURL=DrawingWorker-Ub4POFLs.js.map
